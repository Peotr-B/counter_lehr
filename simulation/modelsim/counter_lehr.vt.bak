// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/22/2025 13:33:10"
                                                                                
// Verilog Test Bench template for design : counter_lehr
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module counter_lehr_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg enable;
reg reset;
// wires                                               
wire [3:0]  count;

// assign statements (if any)                          
counter_lehr i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.count(count),
	.enable(enable),
	.reset(reset)
);
initial      

//#10000 $finish;

begin                                                  
// code that executes only once                        
// insert code here --> begin                          
  clk = 0;
  enable = 0;
  reset = 0;                                             $display("Running testbench");                                                        
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)  

#50	clk=!clk;	//создание clk http://we.easyelectronics.ru/plis/testbench-na-verilog-dlya-novichkov.html
                
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
//@eachvec;                                              
// --> end                                             
//end                                                    
//endmodule

/* 
    avatar
    tda2030
    03 декабря 2011, 10:13
    ↑
уже 2 раз отвечаю на свои вопросы =) я не понял почему но 
если «endmodule» переместить в конец кода то код начинает работать))*/

event reset_trigger; //объявление событий
event reset_done_trigger; //

//блок формирования Reset
initial begin 
 forever begin //бесконечный цикл 
  @ (reset_trigger); //ждем события reset_trigger
  @ (negedge clk); //ждем negedge clk
  reset = 1;    //сброс
  @ (negedge clk); 
  reset = 0; 
  -> reset_done_trigger; //сигналим что reset выполнен
  end 
end

//Ход симуляции
initial  
 begin: TEST_CASE 
    #50  -> reset_trigger;  //сделать ресет
end

//Давайте добавим в программу условия остановки симуляции.

event terminate_sim;  
initial begin  
 @ (terminate_sim); 
 #5  $stop; 
end  

//Теперь в нужное место вставляем

//-> terminate_sim;

/* 
    avatar
    tda2030
    03 декабря 2011, 10:13
    ↑
уже 2 раз отвечаю на свои вопросы =) я не понял почему но 
если «endmodule» переместить в конец кода то код начинает работать))*/

initial      
#10000 $finish;

endmodule
